package med.voll.api.domain.medico;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import med.voll.api.domain.endereco.Endereco;

@Table(name = "medicos") // this annotation will change the table name to "medicos"
@Entity(name = "Medico") // this annotation will change the entity name to "Medico"
@Getter // this annotation will generate the getters for all the fields
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id") // this annotation will generate the equals and hashCode methods for the field "id"
public class Medico {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;
    private String email;
    private String telefone;
    private String crm;

    @Enumerated(EnumType.STRING)
    private Especialidade especialidade;

    @Embedded
    private Endereco endereco;

    private boolean ativo;

    public Medico(MedicoRecord dados) {
        this.nome = dados.nome(); // we are actually getting the "Getter" generated by record, that's why the parameters ().
        this.email = dados.email();
        this.telefone = dados.telefone();
        this.crm = dados.crm();
        this.especialidade = dados.especialidade();
        this.endereco = new Endereco(dados.endereco());
        this.ativo = true; // when we create a new medico, it's active by default
    }

    public void update(UpdateMedicoDTO medico) {
        if(medico.nome() != null) this.nome = medico.nome(); // if the name is not null, update the name
        if(medico.email() != null) this.email = medico.email(); // if the email is not null, update the email
        if(medico.telefone() != null) this.telefone = medico.telefone(); // if the telefone is not null, update the telefone
        if(medico.endereco() != null) this.endereco = new Endereco(medico.endereco()); // if the endereco is not null, update the endereco
    }

    public void inactivate() {
        this.ativo = false; // inactivate the medico
    }
}
